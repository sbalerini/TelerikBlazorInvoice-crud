@page "/gridoe1"
@inject HttpClient Http
@using BlazorOE01.Common.OE01
﻿@using BlazorOE01.Pages
@using System.IO
@using System.Dynamic
@using System.Text.Json;
@using Newtonsoft.Json;
@using Telerik.DataSource;
@using Telerik.Blazor;
@using Microsoft.AspNetCore.Components.Authorization


<h3>Facturas</h3>

<AuthorizeView>
    <Authorized Context="authContext">
        <div class="container-fluid my-3 py-3">
            <!-- Rest of the content -->
            <div class="container-fluid my-3 py-3">
                <div class="row">
                    <div class="col-12">
                        <div class="card mt-8" id="basic-info">
                            <div class="card-body pt-0">
                                <!-- Button to Open Dialog -->
                                <div class="row">
                                    <div class="col-sm-2 col-3 mt-4">
                                        <div class="input-group input-group-static">
                                            <label>Nro factura: </label>
                                            <TelerikNumericTextBox Min="0" Class="form-control" @bind-Value="txtTop" />
                                        </div>
                                    </div>
                                </div><br />
                                <div class="col-4 col-xs-6 md-3">
                                    <div class="report-button-wrapper demo-section k-form k-form-md">
                                        <TelerikButton ThemeColor="@(ThemeConstants.Button.ThemeColor.Primary)" OnClick="@MostrarDatos" Enabled="@(!Visible)">
                                            VER DATOS
                                            <TelerikLoader Class="loader-indicator" ThemeColor="light" Visible="@Visible"></TelerikLoader>
                                        </TelerikButton>

                                    </div>
                                </div>
                            </div>
                            <div class="m-8 mt-1">
                                <TelerikGrid @ref="@GridRef"
                                             Data="@ttInvoices"
                                             OnDelete="@DeleteHandler"
                                             OnUpdate="@UpdateHandler"
                                             OnCreate="@CreateHandler"
                                             ConfirmDelete="true"
                                             Groupable="true"
                                             FilterMode="GridFilterMode.FilterMenu"
                                             Resizable="true"
                                             Reorderable="true"
                                             EditMode="GridEditMode.Popup"
                                             Height="650px"
                                             Sortable="true"
                                             SortMode="@SortMode.Single"
                                             Pageable="true"
                                             PageSize="10">
                                    <GridExport>
                                        @if (!string.IsNullOrWhiteSpace(Message) && descripcion == null)
                                        {
                                            <div class="col-3" style="text-align: right;">
                                                <p>@Message</p>
                                            </div>
                                        }
                                        @if (descripcion != null && estado == "OK")
                                        {
                                            <div id="" class="alert alert-success" role="alert">@descripcion </div>
                                        }
                                        else if (estado == "Error")
                                        {
                                            <div id="" class="alert alert-danger" role="alert">@descripcion </div>
                                        }
                                    </GridExport>

                                    <GridColumns>
                                        <GridCheckboxColumn></GridCheckboxColumn>
                                        @foreach (var col in typeof(Ttinvoice).GetProperties())
                                        {
                                            <GridColumn Field="@(col.Name)" Width="80px" Title="@(col.Name)" Lockable="true" />
                                        }
                                        <GridCommandColumn Width="260px">
                                            <GridCommandButton Command="Edit" Icon="@SvgIcon.Pencil" ThemeColor="@ThemeConstants.Button.ThemeColor.Primary">Editar</GridCommandButton>
                                            <GridCommandButton Command="Delete" Icon="@SvgIcon.Trash">Delete</GridCommandButton>
                                        </GridCommandColumn>

                                    </GridColumns>
                                    <GridToolBarTemplate>
                                        <GridCommandButton Command="Add" Icon="@SvgIcon.Plus">Agregar Factura</GridCommandButton>
                                        <TelerikButton OnClick="@(async () => await GridRef.SaveAsExcelFileAsync())">Descarga Excel</TelerikButton>
                                    </GridToolBarTemplate>
                                </TelerikGrid>
                            </div>

                        </div>
                    </div>
                </div>
            </div>
        </div>
    </Authorized>
</AuthorizeView>


@code {
    private DateTime? SelectedDate { get; set; }
    bool Visible { get; set; }
    string Message { get; set; }

    async Task GenerateReport()
    {
        Message = "Generando reporte...";
        Visible = true;
        Task.Delay(6000);
    }



    protected override async Task OnInitializedAsync()
    {
        //  Products = new ObservableCollection<Product>(data);
        await MostrarDatos();
    }


    private TelerikGrid<Ttinvoice> GridRef { get; set; }

    protected async override void OnInitialized()
    {
        // await MostrarDatos();
    }





    bool ExportAllPages { get; set; }

    private MemoryStream exportedExcelStream { get; set; }

    private async Task GetTheDataAsAStream()
    {
        MemoryStream finalizedStream = await GridRef.ExportToExcelAsync();

        exportedExcelStream = new MemoryStream(finalizedStream.ToArray());
    }

    string estado, descripcion;

    public async Task CreateHandler(GridCommandEventArgs args)
    {
        string baseURL = "http://192.168.10.46:8810/ApiFirst/rest/Servicio/Invoice";
        

        var arsItem = (Ttinvoice)args.Item;

        var rootObject = new Rootobject
        {
                dsGeneral = new Dsgeneral
                {
                    ttinvoice = new Ttinvoice[] { arsItem },
                            ttestados = new Ttestados[0]
                }
        };


        using (HttpClient httpClient = new HttpClient())
        {
            var response = await httpClient.PostAsJsonAsync(baseURL, rootObject);

            if (response.IsSuccessStatusCode)
            {
              
                var jsonResponse = await response.Content.ReadAsStringAsync();
                Console.WriteLine(jsonResponse);
                var rootObject1 = JsonConvert.DeserializeObject<Rootobject>(jsonResponse);
                estado = rootObject1.dsGeneral.ttestados[0].Estado;
                descripcion = rootObject1.dsGeneral.ttestados[0].Descripcion;
                await MostrarDatos();
            }
        }



    }

    public async Task UpdateHandler(GridCommandEventArgs args)
    {
        string baseURL = "http://192.168.10.46:8810/ApiFirst/rest/Servicio/Invoice";


        var arsItem = (Ttinvoice)args.Item;


        var rootObject = new Rootobject
        {
                dsGeneral = new Dsgeneral
                {
                    ttinvoice = new Ttinvoice[] { arsItem },
                    ttestados = new Ttestados[0]
                }
        };


        using (HttpClient httpClient = new HttpClient())
        {
            var response = await httpClient.PutAsJsonAsync(baseURL, rootObject);
            Console.WriteLine(response);
            if (response.IsSuccessStatusCode)
            {
                var jsonResponse = await response.Content.ReadAsStringAsync();
                Console.WriteLine(jsonResponse);
                var rootObject1 = JsonConvert.DeserializeObject<Rootobject>(jsonResponse);
                estado = rootObject1.dsGeneral.ttestados[0].Estado;
                descripcion = rootObject1.dsGeneral.ttestados[0].Descripcion;
                await MostrarDatos();
            }
        }


    }

    public async Task DeleteHandler(GridCommandEventArgs args)
    {

        var arsItem = (Ttinvoice)args.Item;
        int dr = arsItem.Invoicenum;
        int dr2 = arsItem.CustNum;
        int dr3 = arsItem.OrderNum;
        string cadena = dr.ToString();

        string baseURL = $"http://192.168.10.46:8810/ApiFirst/rest/Servicio/Invoice?wId={dr}&wId2={dr2}&wId3={dr3}";

        using (HttpClient httpClient = new HttpClient())
        {
            var response = await httpClient.DeleteAsync(baseURL);
            Console.WriteLine(response);
            if (response.IsSuccessStatusCode)
            {
                var jsonResponse = await response.Content.ReadAsStringAsync();
                Console.WriteLine(jsonResponse);
                var rootObject1 = JsonConvert.DeserializeObject<Rootobject>(jsonResponse);
                estado = rootObject1.dsGeneral.ttestados[0].Estado;
                descripcion = rootObject1.dsGeneral.ttestados[0].Descripcion;
                await MostrarDatos();
            }
        }
    }



    int txtTop { get; set; } = 0;

    public List<Ttinvoice> ttInvoices { get; set; }

    protected async Task MostrarDatos()
    {
        ttInvoices = await GetInvoice(txtTop);
    }

    private async Task<List<Ttinvoice>> GetInvoice(int itop)
    {

        GenerateReport();
        List<Ttinvoice> ttInvoices = new();
        string baseURL = "http://192.168.10.46:8810/ApiFirst/rest/Servicio/Invoice";


        using (var http = new HttpClient())
        {
            http.BaseAddress = new Uri(baseURL);

            if (itop == 0)
            {
                {
                    var request1 = await http.GetAsync($"Invoice");

                    if (request1.IsSuccessStatusCode)
                    {
                        var response = await request1.Content.ReadFromJsonAsync<Rootobject>();
                        ttInvoices = response.dsGeneral.ttinvoice.ToList();

                        Visible = false;
                        Message = "Tu reporte ha sido generado con exito.";

                    }

                }
            }
            else 
            {
                {
                    var request1 = await http.GetAsync($"Invoice?itop={itop}");

                    if (request1.IsSuccessStatusCode)
                    {
                        var response = await request1.Content.ReadFromJsonAsync<Rootobject>();

                        ttInvoices = response.dsGeneral.ttinvoice.ToList();
                       
                            Visible = false;
                            Message = "Tu registro ha sido encontrado con exito.";

                       


                    }

                }



            }

        }

        return ttInvoices;
    }

   
    
        


}
